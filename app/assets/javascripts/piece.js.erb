var Piece = function(player){
  this.square = null;
  this.player = player;
  this.isKing = false;
  Piece.all.push(this);
}

Piece.all = [];

Piece.findOnClick = function(imageTag){
  var square = $(imageTag).parent();
  return Square.findByJSquare(square).piece;
};

Piece.prototype.goToSquare= function(newSquare){
  this.square = newSquare;
  this.square.piece = this;
  this.square.jSquare().append(this.render());
};

Piece.prototype.render = function () {
  if (this.player.name == 'p2'){
    return '<%= image_tag "burger", class:"p2 piece"%>'
  } else if (this.player.name == 'p1'){
    return '<%= image_tag "yellow-burger", class:"p1 piece"%>'
  }
};

Piece.prototype.jumpOrSlide = function(newSquare){
  if(newSquare == this.jumpLeft() || newSquare == this.jumpRight()){
    this.toggleHighlight();
    this.move(newSquare);
    this.doubleJumpHighlight();
    this.jumpAgain(newSquare);
  } else {
    this.toggleHighlight();
    this.move(newSquare);
  }
};

Piece.prototype.move = function(newSquare) {
  this.leaveSquare();
  this.capturePiece(newSquare);
  this.goToSquare(newSquare);
};

Piece.prototype.jumpAgain = function (newSquare) {
  this.square.jSquare().on('click', this, function(e){
    var piece = e.data;
    piece.square.jSquare().off();
    $('.selected').toggleClass("selected");
    piece.player.opponent.takesTurn();
  });
  $('.highlighted').on('click', this, function(e){
    $('.highlighted').off();
    var piece = e.data;
    var square = Square.findByJSquare($(this));
    piece.move(square);
    $('.highlighted').toggleClass('highlighted');
  })
};

Piece.prototype.capturePiece = function(newSquare){
  if (newSquare == this.jumpLeft()){
    this.left().piece.die();
  } else if (newSquare == this.jumpRight()){
    this.right().piece.die();
  }
}

Piece.prototype.toggleHighlight = function(){
  this.legalMoves().forEach(function(square){
    square.jSquare().toggleClass('highlighted');
  });
  this.square.jSquare().toggleClass('highlighted');
};

Piece.prototype.doubleJumpHighlight = function(){
  if(this.jumpsAvailable()){
    this.jumpsAvailable().forEach(function(square){
      square.jSquare().toggleClass('highlighted');
    });
    this.square.jSquare().toggleClass('highlighted');
  }
};

Piece.prototype.legalMoves = function(){
  var moves = [];
  //Does the player have any pieces with jump available?
  //If so, this piece has no legal moves
  if (this.jumpsAvailable()){
    moves = this.jumpsAvailable();

  }else{
    if (!!this.left() && this.left().empty()) {moves.push(this.left())};
    if (!!this.right() && this.right().empty()) {moves.push(this.right())};
  }
  return moves;
};


//left and right determined by P1 perspective
Piece.prototype.left = function(){
  if (this.player.name == "p1"){
    return Square.findByPosition(this.square.positionX - 1, this.square.positionY - 1);
  } else if (this.player.name == "p2"){
    return Square.findByPosition(this.square.positionX - 1, this.square.positionY + 1)
  }
};

Piece.prototype.jumpLeft = function(){
  if (this.player.name == "p1"){
    return Square.findByPosition(this.square.positionX - 2, this.square.positionY - 2);
  } else if (this.player.name == "p2"){
    return Square.findByPosition(this.square.positionX - 2, this.square.positionY + 2)
  }
};

//left and right determined by P1 perspective
Piece.prototype.right = function(){
  if (this.player.name == "p1"){
    return Square.findByPosition(this.square.positionX + 1, this.square.positionY - 1)
  } else if (this.player.name == "p2"){
    return Square.findByPosition(this.square.positionX + 1, this.square.positionY + 1)
  }
}

Piece.prototype.jumpRight = function(){
  if (this.player.name == "p1"){
    return Square.findByPosition(this.square.positionX + 2, this.square.positionY - 2)
  } else if (this.player.name == "p2"){
    return Square.findByPosition(this.square.positionX + 2, this.square.positionY + 2)
  }
}


Piece.prototype.leaveSquare = function(){
  this.square.jSquare().html('');
  this.square.piece = null;
};

Piece.prototype.leaveGame = function() {
  var index = Piece.all.indexOf(this);
  Piece.all.splice(index, 1);
};

Piece.prototype.die = function() {
  this.leaveSquare();
  this.leaveGame();
};

Piece.prototype.jumpsAvailable = function(){
  var jumps = []
  if (this.left() && !this.left().empty() && (this.left().piece.player == this.player.opponent) && this.jumpLeft() && this.jumpLeft().empty()){
    jumps.push(this.jumpLeft());

  } else if (this.right() && !this.right().empty() && (this.right().piece.player == this.player.opponent) && this.jumpRight() && this.jumpRight().empty()){
    jumps.push(this.jumpRight());
  } else {
    return false
  }
  return jumps
}
